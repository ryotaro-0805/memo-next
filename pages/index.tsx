// このコードはfirebase接続と写真を表示させる記述あり

import Head from 'next/head'
import Image from 'next/image';
import { useEffect, useRef, useState } from 'react'
import img1 from '../public/img/pic1.jpg'
import img2 from '../public/img/pic2.jpg'
import { db } from '../public/firebase';
import { getFirestore, collection, getDocs, setDoc, doc, addDoc, deleteDoc } from 'firebase/firestore';
import { useRouter } from 'next/router';

export default function Home() {
  const [text, setText] = useState(['No text']);
  const textRef: any = useRef('');
  const handleText = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const getText: string = textRef.current.value;
    if (text[0] === 'No text') setText(['']);
    setText((inData) => [...inData, textRef.current.value]);
    handleRegister(getText);
    getData();
  }

  const [delSwitch,setDelSwitch]=useState('no');
  
  useEffect(() => {
    textRef.current.value = ('');
  }, [text]);

  const clearFnc = () => {
    setText(['No text']);
  }

  const [handlePic1, setHandlePic1] = useState(1);
  const [handlePic2, setHandlePic2] = useState(0);

  const handleClick: any = () => {
    if (handlePic1 === 0) {
      setHandlePic1(1);
      setHandlePic2(0);
    } else {
      setHandlePic1(0);
      setHandlePic2(1);
    }
  }

  const opa1: object = { opacity: handlePic1 };
  const opa2: object = { opacity: handlePic2 };

  const [firestoreText, setFirestoreText] = useState(Array<string>);

  // Firestoreからデータを取得
  const getData = async () => {
    const text = collection(db, 'users');
    const querySnapshot = await getDocs(text);
    setFirestoreText(['']);
    querySnapshot.docs.map((doc) => {
      setFirestoreText((inData: Array<string>) => [...inData, doc.data().text]);
    });
  }

  const [delText, setDelText] = useState([]);

  // Firestoreのデータを削除
  const deleteFnc = async () => {
    const querySnapshot = await (getDocs(collection(db, 'users')));
    querySnapshot.docs.map((doc) => {
      setDelText((inData: Array<string>) => [...inData, doc.id]);
    });
  }

  useEffect(() => {
    delText.map(inData => deleteDoc(doc(db, 'users', inData)));
    getData();
  }, [delText]);

  // Firestoreへデータを保存
  // idを指定する場合（'test'がID、dbはアプリ情報、usersがデータベース名(’コレクションを開始’欄のもの)）
  // const handleRegister=async()=>{
  //  await setDoc(doc(db,'users','test'),{
  //     text:'nigth',
  //   });
  // }
  // handleRegister();

  // idを自動生成してデータを追加
  // 公式サイト古い？公式サイトのやり方では出来ないので以下参照
  const handleRegister = (getText: string) => {
    addDoc(collection(db, 'users'), {
      text: getText
    });
  }
  // const handleRegister=async()=>{
  //   await db.collection('users').add({
  //     text:'baybay'
  // });
  // handleRegister();

  useEffect(() => {
    getData();
    router.query.data==='yes' && deleteFnc();

    console.log(router.query.data);
    
  }, []);

  // ページ遷移
  const router = useRouter();
  const handleRouter=()=>{
    // getData(); //まずはFirestoreのデータを取得しておく
    router.push({
      pathname:'/cautionPage',
      query:{
        data:delSwitch,
      },
    },'caution-page');
  }


  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <h2>Input App</h2>
        <form action="" onSubmit={handleText}>
          <label htmlFor="text">
            <p>Enter text</p>
            <input type="text" id='text' ref={textRef} />
            <br />
          </label>
        </form>
        <button onClick={clearFnc}>InputData Clear</button>
        <br />
        <button onClick={handleRouter}>Go to cautionPage</button>
        <hr style={{ margin: '10px 0' }} />
        <h3>Texts entered</h3>
        {text.map((data, index) => (
          <p key={index}>{data}</p>
        ))}
      </div>
      <div className='div' onClick={handleClick}>
        {/* <Image className='image' src={img1} style={opa1} alt='pic' width={200} /> */}
        {/* <Image className='image' src={img2} style={opa2} alt='pic' width={200} /> */}
      </div>
      {/* <Image src={img2} alt='pic2' width={200} /> */}
      {/* <img src='img/pic2.jpg' alt='pic2' width={200} /> */}
      <hr />
      <h3>Firestore Data</h3>
      {firestoreText.map((text, index) => (
        <p key={index}>{text}</p>
      ))}

      {/* googleのバスワード入力画面っぽいものを作ってみた */}
      <div className='pass_div'>
        <span className='pass_span'>パスワードを入力</span>
        <input className='pass_input' type="text" />
      </div>
    </>
  )
}
